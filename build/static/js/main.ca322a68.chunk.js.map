{"version":3,"sources":["utils/getLastPathnamePart.ts","components/Authorization/Login/Login.tsx","components/Authorization/Registration/Registration.tsx","components/Authorization/Authorization.tsx","utils/hoc/withChatId.tsx","components/EmptyChat/EmptyChat.tsx","components/LeftColumn/ChatList/ChatBar/ChatBar.tsx","components/LeftColumn/ChatList/ChatList.tsx","components/LeftColumn/LeftColumn.tsx","components/RightColumn/Messages/Messages.tsx","utils/html.tsx","components/RightColumn/RightColumn.tsx","components/Chat/Chat.mock.ts","components/Chat/Chat.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["getLastPathnamePart","pathname","pathnameParts","split","length","handleChange","setValue","event","value","currentTarget","openChat","userName","userPassword","history","authors","setAuthorization","setCurrentUser","trim","currentUserId","findIndex","email","password","push","handleKeyDown","routeProps","key","Login","setUserName","setUserPassword","rest","className","src","alt","placeholder","onChange","onKeyDown","required","type","id","disabled","htmlFor","onClick","userLogin","userPasswordConfirm","addNewAuthor","name","avatar","Registration","setUserLogin","setUserPasswordConfirm","cx","TABS","to","Authorization","renderTabs","props","location","activeTab","map","isActive","this","isAuthorization","path","render","exact","PureComponent","withChatId","Component","withRouter","selectedChatId","EmptyChat","ChatBar","chatId","date","author","chatName","lastMessage","icon","message","replace","slice","formatDate","Date","getUTCMonth","getUTCDate","getFullYear","WithChatIdChatBar","ChatList","chats","messages","chatList","useMemo","messagesId","chatMessages","dateMessages","authorId","sort","a","b","prepareChatList","LeftColumn","renderDateMessages","dateMessagesId","toLocaleString","year","month","day","weekday","timeZone","getFormatDate","index","html","messageId","time","showAuthorInfo","width","dangerouslySetInnerHTML","__html","renderMessages","Messages","RightColumn","textareaRef","state","textareaValue","setState","target","handleSendingMessage","chatIndex","sendMessage","nowDate","shortid","generate","getHours","getMinutes","getSeconds","handleResetTextareaValue","current","focus","shiftKey","getIndexChatMessage","getChatMessages","selectedChat","renderPanel","ref","createRef","prevProps","CHATS","MESSAGES","loremIpsum","count","AUTHORS","WithChatIdRightColumn","Chat","componentDidMount","prevState","hanleSendMessage","hasCurrentDate","currentDate","newChatMessages","item","itemDate","parse","getMonth","getDate","component","App","useState","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.ca322a68.chunk.js","sourcesContent":["export const getLastPathnamePart = (pathname : string): string => {\n    const pathnameParts = pathname.split('/')\n\n    return  pathnameParts[pathnameParts.length - 1]\n}\n","import React, {\n    ChangeEvent,\n    KeyboardEvent\n} from 'react'\nimport {\n    RouteComponentProps,\n  } from 'react-router-dom'\nimport {\n    TDataAuthors\n} from 'components/Chat/Chat'\n\nimport './Login.css'\n\ntype TProps = {\n    userName: string,\n    userPassword: string,\n    setUserName: (userName: string) => string,\n    setUserPassword: (userPassword: string) => string\n}\n\ntype TAuthorizationProps = {\n    authors: TDataAuthors,\n    setAuthorization: (isAuthorization: boolean) => boolean,\n    setCurrentUser: (currentUserId: number) => number,\n    isAuthorization: boolean\n}\n\nconst USERNAME_PLACEHOLDER = 'Username'\nconst PASSWORD_PLACEHOLDER = 'Password'\nconst REMEMBER_ME = 'Remember me'\nconst FORGOT_PASSWORD = 'Forgot password?'\nconst LOGIN = 'Login'\n\nconst handleChange = (setValue: (value: string) => string) => (\n    event: ChangeEvent<HTMLInputElement>\n): void => {\n    const {\n        currentTarget: {\n            value\n        }\n    } = event\n\n    setValue(value)\n}\n\nconst openChat = (\n    userName: string,\n    userPassword: string,\n    {\n        history,\n        authors,\n        setAuthorization,\n        setCurrentUser\n    }: RouteComponentProps & TAuthorizationProps\n) => () => {\n    if (userName.trim().length > 0 && userPassword.trim().length > 0) {\n        const currentUserId = authors.findIndex(({ email }: {\n                email: string\n            }) => {\n                if (email === userName) {\n                    return true\n                }\n\n                const user = email.split('@')[0]\n\n                return user === userName\n            }\n        )\n\n    if (currentUserId >= 0 && authors[currentUserId].password === userPassword) {\n            setAuthorization(true)\n            setCurrentUser(currentUserId)\n            history.push('/chat');\n        }\n    }\n};\n\nconst handleKeyDown = (\n    userName: string,\n    userPassword: string,\n    routeProps: RouteComponentProps & TAuthorizationProps\n): (\n    event: KeyboardEvent<HTMLInputElement>\n) => void => (\n    event: KeyboardEvent<HTMLInputElement>\n): void => {\n    const {\n        key\n    } = event\n\n    if (key === 'Enter') {\n        openChat(userName, userPassword, routeProps)\n    }\n}\n\nexport const Login = ({\n    userName,\n    userPassword,\n    setUserName,\n    setUserPassword,\n    ...rest\n}: TProps & TAuthorizationProps & RouteComponentProps) => (\n    <div className='login'>\n        <div className='login__continer'>\n            <img\n                className='login__continer__img'\n                src='/react-messenger/icons/profile.svg'\n                alt='profile icon'\n            />\n            <input\n                className='login__continer__input'\n                placeholder={USERNAME_PLACEHOLDER}\n                value={userName}\n                onChange={handleChange(setUserName)}\n                onKeyDown={handleKeyDown(userName, userPassword, rest)}\n                required\n            />\n        </div>\n        <div className='login__continer'>\n            <img\n                className='login__continer__img'\n                src='/react-messenger/icons/lock.svg'\n                alt='profile icon'\n            />\n            <input\n                className='login__continer__input'\n                type='password'\n                placeholder={PASSWORD_PLACEHOLDER}\n                value={userPassword}\n                onChange={handleChange(setUserPassword)}\n                onKeyDown={handleKeyDown(userName, userPassword, rest)}\n                required\n            />\n        </div>\n        <div className='login__helpers'>\n            <div className='login__helpers_rememberMe'>\n                <input\n                    className='login__helpers__checkbox'\n                    id='rememberMe'\n                    type='checkbox'\n                    disabled\n                />\n                <label htmlFor='rememberMe'>\n                    {REMEMBER_ME}\n                </label>\n            </div>\n            <div>\n                {FORGOT_PASSWORD}\n            </div>\n        </div>\n        <button\n            className='login__button'\n            type='button'\n            onClick={openChat(userName, userPassword, rest)}\n        >\n            {LOGIN}\n        </button>\n    </div>\n)\n","import React, {\n    ChangeEvent,\n    KeyboardEvent\n} from 'react'\nimport {\n    RouteComponentProps,\n  } from 'react-router-dom'\nimport cx from 'classnames'\nimport {\n    TDataAuthors\n} from 'components/Chat/Chat'\n\nimport './Registration.css'\n\ntype TProps = {\n    userLogin: string,\n    userName: string,\n    userPassword: string,\n    userPasswordConfirm: string,\n    setUserLogin: (userName: string) => string,\n    setUserName: (userName: string) => string,\n    setUserPassword: (userPassword: string) => string,\n    setUserPasswordConfirm: (userPasswordConfirm: string) => string\n}\n\ntype TAuthorizationProps = {\n    authors: TDataAuthors,\n    addNewAuthor: (author: any) => any,\n    setAuthorization: (isAuthorization: boolean) => boolean,\n    setCurrentUser: (currentUserId: number) => number,\n    isAuthorization: boolean\n}\n\nconst EMAIL_PLACEHOLDER = 'Email'\nconst USERNAME_PLACEHOLDER = 'Username'\nconst PASSWORD_PLACEHOLDER = 'Password'\nconst PASSWORD_PLACEHOLDER_CONFIRM = 'Confirm password'\nconst SING_UP = 'Sign Up'\n\nconst handleChange = (setValue: (value: string) => string) => (\n    event: ChangeEvent<HTMLInputElement>\n): void => {\n    const {\n        currentTarget: {\n            value\n        }\n    } = event\n\n    setValue(value)\n}\n\nconst openChat = (\n    userLogin: string,\n    userName: string,\n    userPassword: string,\n    userPasswordConfirm: string,\n    {\n        history,\n        authors,\n        addNewAuthor,\n        setAuthorization,\n        setCurrentUser\n    }: RouteComponentProps & TAuthorizationProps\n) => () => {\n    if (\n        userName.trim().length > 0\n        && userPassword.trim().length > 0\n        && userPasswordConfirm.trim().length > 0\n    ) {\n        const currentUserId = authors.findIndex(({ email }: {\n                email: string\n            }) => email === userName\n        )\n\n    if (currentUserId < 0 && userPassword === userPasswordConfirm) {\n            addNewAuthor([\n                ...authors,\n                {\n                    email: userLogin,\n                    name: userName,\n                    avatar: 'Anonymous',\n                    password: userPassword\n            }])\n            setAuthorization(true)\n            setCurrentUser(authors.length)\n            history.push('/chat');\n        }\n    }\n};\n\nconst handleKeyDown = (\n    userLogin: string,\n    userName: string,\n    userPassword: string,\n    userPasswordConfirm: string,\n    routeProps: RouteComponentProps & TAuthorizationProps\n): (\n    event: KeyboardEvent<HTMLInputElement>\n) => void => (\n    event: KeyboardEvent<HTMLInputElement>\n): void => {\n    const {\n        key\n    } = event\n\n    if (key === 'Enter') {\n        openChat(\n            userLogin,\n            userName,\n            userPassword,\n            userPasswordConfirm,\n            routeProps\n        )\n    }\n}\n\nexport const Registration = ({\n    userLogin,\n    userName,\n    userPassword,\n    userPasswordConfirm,\n    setUserLogin,\n    setUserName,\n    setUserPassword,\n    setUserPasswordConfirm,\n    ...rest\n}: TProps & TAuthorizationProps & RouteComponentProps) => (\n    <div className='registration'>\n        <div className='registration__continer'>\n            <img\n                className={cx(\n                    'registration__continer__img', \n                    'registration__continer__img_email'\n                )}\n                src='/react-messenger/icons/email.svg'\n                alt='email icon'\n            />\n            <input\n                className='registration__continer__input'\n                type='email'\n                placeholder={EMAIL_PLACEHOLDER}\n                value={userLogin}\n                onChange={handleChange(setUserLogin)}\n                onKeyDown={handleKeyDown(\n                    userLogin,\n                    userName,\n                    userPassword,\n                    userPasswordConfirm,\n                    rest\n                )}\n                required\n            />\n        </div>\n            <div className='registration__continer'>\n            <img\n                className='registration__continer__img'\n                src='/react-messenger/icons/profile.svg'\n                alt='profile icon'\n            />\n            <input\n                className='registration__continer__input'\n                type='email'\n                placeholder={USERNAME_PLACEHOLDER}\n                value={userName}\n                onChange={handleChange(setUserName)}\n                onKeyDown={handleKeyDown(\n                    userLogin,\n                    userName,\n                    userPassword,\n                    userPasswordConfirm,\n                    rest\n                )}\n                required\n            />\n        </div>\n        <div className='registration__continer'>\n            <img\n                className='registration__continer__img'\n                src='/react-messenger/icons/lock.svg'\n                alt='profile icon'\n            />\n            <input\n                className='registration__continer__input'\n                type='password'\n                placeholder={PASSWORD_PLACEHOLDER}\n                value={userPassword}\n                onChange={handleChange(setUserPassword)}\n                onKeyDown={handleKeyDown(\n                    userLogin,\n                    userName,\n                    userPassword,\n                    userPasswordConfirm,\n                    rest\n                )}\n                required\n            />\n        </div>\n        <div className='registration__continer'>\n            <img\n                className='registration__continer__img'\n                src='/react-messenger/icons/lock.svg'\n                alt='profile icon'\n            />\n            <input\n                className='registration__continer__input'\n                type='password'\n                placeholder={PASSWORD_PLACEHOLDER_CONFIRM}\n                onChange={handleChange(setUserPasswordConfirm)}\n                onKeyDown={handleKeyDown(\n                    userLogin,\n                    userName,\n                    userPassword,\n                    userPasswordConfirm,\n                    rest\n                )}\n                required\n            />\n        </div>\n        <button\n            className='registration__button'\n            type='button'\n            onClick={openChat(\n                userLogin,\n                userName,\n                userPassword,\n                userPasswordConfirm,\n                rest\n            )}\n        >\n            {SING_UP}\n        </button>\n    </div>\n)\n","import React, { PureComponent } from 'react';\nimport {\n  Switch,\n  Route,\n  RouteComponentProps,\n  Link\n} from 'react-router-dom'\nimport cx from 'classnames'\n\nimport {\n    getLastPathnamePart\n} from 'utils/getLastPathnamePart'\nimport {\n    TDataAuthors\n} from 'components/Chat/Chat'\n\nimport { Login } from './Login/Login'\nimport { Registration } from './Registration/Registration'\n\nimport './Authorization.css'\n\n// TODO пока не получилось избавить от any\ntype TProps = {\n    userLogin: string,\n    userName: string,\n    userPassword: string,\n    userPasswordConfirm: string,\n    authors: TDataAuthors,\n    addNewAuthor: (author: any) => any,\n    setUserLogin: (userName: string) => any,\n    setUserName: (userName: string) => any,\n    setUserPassword: (userPassword: string) => any,\n    setUserPasswordConfirm: (userPasswordConfirm: string) => any,\n    setAuthorization: (isAuthorization: boolean) => any,\n    setCurrentUser: (currentUserId: number) => any,\n    isAuthorization: boolean\n}\n\n\nconst TABS = [\n    {\n        id: 'authorization',\n        name: 'LOG IN',\n        to: '/authorization'\n    },\n    {\n        id: 'registration',\n        name: 'SIGN UP',\n        to: '/authorization/registration'\n    }\n]\n\n// TODO refactor Login and Registration, add showing message\nexport class Authorization extends PureComponent<RouteComponentProps & TProps> {\n    renderTabs = () => {\n        const {\n            location: {\n                pathname\n            }\n        } = this.props\n        const activeTab = getLastPathnamePart(pathname)\n\n        return (\n            <nav>\n                <ul className='tabs'>\n                    {TABS.map(({\n                        id,\n                        name,\n                        to\n                    }) => {\n                        const isActive = id === activeTab\n\n                        return (\n                            <li\n                                className={cx('tabs__tab', {\n                                    'tabs__tab_active': isActive\n                                })}\n                                key={id}\n                                >\n                                    <Link\n                                        className='tabs__tab__link '\n                                        to={to}\n                                    >\n                                        {name}\n                                    </Link>\n                            </li>\n                        )\n                    })}\n                </ul>\n            </nav>\n        )\n    }\n\n    public render() {\n    const {\n        userLogin,\n        userName,\n        userPassword,\n        userPasswordConfirm,\n        authors,\n        addNewAuthor,\n        setUserLogin,\n        setUserName,\n        setUserPassword,\n        setUserPasswordConfirm,\n        setAuthorization,\n        setCurrentUser,\n        isAuthorization\n    } = this.props\n\n    return (\n        <div className=\"authorization\">\n        <form  className=\"authorization__form\">\n            {this.renderTabs()}\n            <div className=\"authorization__form__content\">\n                <Switch>\n                    <Route\n                        path='/authorization'\n                        render={(props) =>  (\n                            <Login\n                                {...props }\n                                userName={userName}\n                                userPassword={userPassword}\n                                authors={authors}\n                                setUserName={setUserName}\n                                setUserPassword={setUserPassword}\n                                setAuthorization={setAuthorization}\n                                setCurrentUser={setCurrentUser}\n                                isAuthorization={isAuthorization}\n                            /> \n                        )}\n                        exact\n                    />\n                    <Route\n                        path='/authorization/registration'\n                        render={(props) =>  (\n                            <Registration\n                                {...props}\n                                authors={authors}\n                                userLogin={userLogin}\n                                userName={userName}\n                                userPassword={userPassword}\n                                userPasswordConfirm={userPasswordConfirm}\n                                setUserLogin={setUserLogin}\n                                setUserPasswordConfirm={setUserPasswordConfirm}\n                                addNewAuthor={addNewAuthor}\n                                setUserName={setUserName}\n                                setUserPassword={setUserPassword}\n                                setAuthorization={setAuthorization}\n                                setCurrentUser={setCurrentUser}\n                                isAuthorization={isAuthorization}\n                            /> \n                        )}\n                    />\n                </Switch>\n            </div>\n        </form>\n        </div>\n    );\n    }\n}\n","import React, { ComponentType } from 'react'\nimport {\n    RouteComponentProps,\n    withRouter\n} from 'react-router-dom';\n\nimport {\n    getLastPathnamePart\n} from 'utils/getLastPathnamePart'\n\nexport type THocWithChatIdProps = {\n    selectedChatId: string\n}\n\nexport function withChatId<T>(Component: ComponentType<T & THocWithChatIdProps>) {\n    return withRouter((props: T & RouteComponentProps) => {\n        const {\n            location: {\n                pathname = ''\n            }\n        } = props\n        const selectedChatId: string = getLastPathnamePart(pathname)\n\n        return (\n            <Component\n                {...props}\n                selectedChatId={selectedChatId}\n            />\n        )\n    })\n}\n","import React from 'react'\n\nimport './EmptyChat.css'\n\nconst PLACEHOLDER_TEXT = 'Please select a chat to start messaging'\n\nexport const EmptyChat = () => (\n    <div className=\"placeholder\">\n        <div className=\"placeholder__text\">\n            {PLACEHOLDER_TEXT}\n        </div>\n    </div>\n)\n","import React, { PureComponent } from 'react'\nimport cx from 'classnames'\nimport {\n    Link\n} from 'react-router-dom'\nimport {\n    THocWithChatIdProps\n} from 'utils/hoc/withChatId'\n\nimport './ChatBar.css'\n\ntype TProps = {\n    chatId: string,\n    author: string,\n    chatName: string,\n    date: number,\n    lastMessage: string,\n    icon: string\n};\n\nconst MAX_LENGTH_PREVIEW_TEXT_MESSAGE = 18;\n\nexport class ChatBar extends PureComponent<TProps & THocWithChatIdProps> {\n    render() {\n        const {\n            selectedChatId,\n            chatId,\n            date = 1556668800000, // '01/05/2020'\n            author = 'Shrek 2',\n            chatName = 'Group Chat',\n            lastMessage = 'tas odio. Ut sit amet...',\n            icon = 'react'\n        } = this.props\n\n        let message = lastMessage.replace(/<br>/g, ' ')\n        message = message.length > MAX_LENGTH_PREVIEW_TEXT_MESSAGE\n            ? `${message.slice(0, MAX_LENGTH_PREVIEW_TEXT_MESSAGE).trim()}...`\n            : message\n        const formatDate = new Date(date)\n\n        return (\n            <li>\n                <Link\n                    className={cx('bar', {\n                        'bar_selected': chatId === selectedChatId\n                    })}\n                    to={`/chat/${chatId}`}\n                >\n                    <div className={'bar__icon'}>\n                        <img src={`/react-messenger/icons/${icon}.svg`} alt={icon}/>\n                    </div>\n                    <div className={'bar__message'}>\n                        <div className={'bar__message__title'}>\n                            <h1 className={'bar__message__title__name'}>\n                                {chatName}\n                            </h1>\n                            <div className={'bar__message__title__date'}>\n                                {`${formatDate.getUTCMonth() + 1}/${formatDate.getUTCDate()}/${formatDate.getFullYear()}`}\n                            </div>\n                        </div>\n                        <div className={'bar__message__content'}>\n                            <span className='bar__message__content_author'>\n                                {author}:\n                            </span>\n                            {' '}{message}\n                        </div>\n                    </div>\n                </Link>\n            </li>\n        )\n    }\n}\n","import React, { useMemo } from 'react';\nimport { withChatId } from 'utils/hoc/withChatId'\nimport { ChatBar } from 'components/LeftColumn/ChatList/ChatBar/ChatBar';\nimport {\n  TDataAuthors,\n  TDataChats,\n  TDataChatMesseges,\n  TDataChatsMesseges\n} from 'components/Chat/Chat'\n\nimport './ChatList.css'\n\nexport type TProps = {\n  authors: TDataAuthors,\n  chats: TDataChats,\n  messages: TDataChatsMesseges\n};\n\ntype TChatList = {\n  author: string,\n  chatId: string,\n  date: number,\n  chatName: string,\n  lastMessage: string,\n  icon: string\n}\n\nexport type DataChatList = TChatList[];\n\n// TODO Вопрос: Думал про {chatId: [message1, message2]},\n// но проблема в том, что у меня не БД, и я вручную проставляю айдишники\n// чтобы не следить за этим, использую shortid.generate()\n// Вот это плохо себе представляю  Record<chatId, Maessage[]> можно пример? \nconst prepareChatList = (\n  chats: TDataChats,\n  messages: TDataChatsMesseges,\n  authors: TDataAuthors\n) : DataChatList => chats\n      .map(({\n          chatId,\n          messagesId,\n          chatName = 'Group chat',\n          icon = 'react'\n      }) => {\n              const chatMessages: TDataChatMesseges = messages[messagesId]\n              const {\n                  dateMessages = [],\n                  date\n              } = chatMessages[chatMessages.length - 1]\n              const {\n                  authorId = 0,\n                  message = 'tas odio. Ut sit amet...'\n              } = dateMessages[dateMessages.length - 1]\n              const author = authors[authorId].name || 'Anonymous'\n\n              return ({\n                  author,\n                  chatId,\n                  date,\n                  chatName,\n                  lastMessage: message,\n                  icon\n          })\n      })\n      .sort((a, b) => {\n        return b.date - a.date\n      })\n\nconst WithChatIdChatBar = withChatId(ChatBar)\n\nexport const ChatList = ({\n  authors = [],\n  chats = [],\n  messages = []\n}: TProps) => {\n  const chatList = useMemo(() => prepareChatList(chats, messages, authors),\n    [chats, messages, authors]\n  )\n\n  return (\n    <ul className=\"chatList\">\n      {chatList\n        .map(({\n                author,\n                chatId,\n                date,\n                chatName,\n                lastMessage,\n                icon\n            }) => (\n                <WithChatIdChatBar\n                    key={chatId}\n                    chatId={chatId}\n                    author={author}\n                    date={date}\n                    chatName={chatName}\n                    lastMessage={lastMessage}\n                    icon={icon}\n                />\n            )\n        )}\n    </ul>\n  );\n}\n","import React from 'react';\nimport { ChatList } from 'components/LeftColumn/ChatList/ChatList';\nimport {\n  TDataAuthors,\n  TDataChats,\n  TDataChatsMesseges\n} from 'components/Chat/Chat'\n\nimport './LeftColumn.css'\n\ntype TProps = {\n  authors: TDataAuthors,\n  chats: TDataChats,\n  messages: TDataChatsMesseges\n};\n\nexport const LeftColumn = ({\n    authors,\n    chats,\n    messages\n}: TProps) => (\n    <header className='leftColumn'>\n      <ChatList\n        authors={authors}\n        chats={chats}\n        messages={messages}\n      />\n    </header>\n);\n","import React from 'react'\n\nimport {\n    createMarkup\n} from 'utils/html'\nimport {\n    TDataAuthors,\n    TDataChatMesseges,\n    TDateMessage\n} from 'components/Chat/Chat'\n\nimport './Messages.css'\n\ntype TDateMessages = TDateMessage[]\n\ntype TProps = {\n    authors: TDataAuthors,\n    chatMessages: TDataChatMesseges\n};\n\nconst EMPTY_CHAT_TEXT = 'You have no messages yet';\n\nconst getFormatDate = (date: number) => new Date(date)\n    .toLocaleString(\"en-US\", {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        weekday: 'short',\n        timeZone: 'UTC'\n    }) \n    .replace(/,/g, '')\n\nconst renderMessages = (\n    messages: TDateMessages,\n    authors: TDataAuthors\n) => messages.map(({\n    authorId,\n    messageId,\n    message,\n    time\n}, index)  => {\n    const {\n        name = 'Anonymous',\n        avatar = 'Anonymous'\n    } = authors[authorId]\n    const showAuthorInfo = index === 0 || (index > 0 && authorId !== messages[index - 1].authorId)\n\n    return (\n        <div\n         className={'message'}\n         key={messageId}\n        >\n            \n            <div className={'message__avatar'}>\n                {showAuthorInfo && (\n                    <img\n                        src={`/react-messenger/images/${avatar}.png`}\n                        alt={name}\n                        width={50}\n                    />\n                )}\n            </div>\n            <div className={'message__text'}>\n            {showAuthorInfo && (\n                <div className={'message__text__name'}>\n                        {name}\n                </div>\n            )}\n                <div\n                    className={'message__text__message'}\n                    dangerouslySetInnerHTML={createMarkup(message)}\n                />\n            </div>\n            <div className={'message__time'}>\n                {time}\n            </div>\n        </div>\n    )\n});\n\nconst renderDateMessages = (\n    chatMessages: TDataChatMesseges,\n    authors: TDataAuthors\n) => chatMessages.map(({\n    date,\n    dateMessagesId,\n    dateMessages\n})  => {\n    const formatDate = getFormatDate(date)\n\n    return (\n        <div\n            className={'dateMessages'}\n            key={dateMessagesId}\n        >\n            <div className={'dateMessages__date'}>\n                {formatDate}\n            </div>\n            <div className={'dateMessages__messages'}>\n                {renderMessages(dateMessages, authors)}\n            </div>\n        </div>\n    )\n})\n\nexport const Messages = ({\n    authors = [],\n    chatMessages = []\n}: TProps) => (\n    <div className={'messages'}>\n        {chatMessages.length > 0\n            ? renderDateMessages(chatMessages, authors)\n            : (\n                <div  className={'messages__emptyChat'}>\n                    {EMPTY_CHAT_TEXT}\n                </div>\n            )\n        }\n    </div>\n);\n","export const createMarkup = (html: string) => ({ __html: html })\n","import React, {\n    PureComponent,\n    ChangeEvent,\n    RefObject,\n    createRef,\n    KeyboardEvent\n} from 'react'\nimport shortid from 'shortid'\nimport {\n    Switch,\n    Route\n} from 'react-router-dom'\nimport {\n    THocWithChatIdProps\n} from 'utils/hoc/withChatId'\n\nimport { Messages } from './Messages/Messages'\n\nimport './RightColumn.css'\nimport {\n    TDataAuthors,\n    TDataChats,\n    TDataChatMesseges,\n    TDataChatsMesseges,\n    TDateMessage\n} from 'components/Chat/Chat'\n\nexport type TSendFuntion = (\n    message: TDateMessage,\n    chateMeassages: TDataChatMesseges,\n    chatIndex: number\n) => void\n\ntype TProps = {\n    authors: TDataAuthors,\n    chats: TDataChats,\n    currentUserId?: number,\n    messages: TDataChatsMesseges,\n    sendMessage: TSendFuntion\n};\n\ntype TState = {\n    textareaValue: string\n};\n\n// TODO add draft, delete and edit\nexport class RightColumn extends PureComponent<TProps & THocWithChatIdProps, TState> {\n    public textareaRef: RefObject<HTMLTextAreaElement>;\n\n    constructor(props: TProps & THocWithChatIdProps) {\n        super(props);\n        this.textareaRef = createRef();\n    }\n\n    public state = {\n        textareaValue: ''\n    } \n\n    public componentDidMount() {\n        this.textareaRef.current?.focus();\n    }\n\n    public componentDidUpdate(prevProps: TProps & THocWithChatIdProps) {\n        if (this.props.selectedChatId !== prevProps.selectedChatId) {\n            this.handleResetTextareaValue()\n        }\n    }\n\n    handleChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        this.setState({\n            textareaValue: event.target.value\n        })\n    };\n\n    handleSendingMessage = (\n        chatMessages: TDataChatMesseges,\n        chatIndex: number\n    ): () => void => (): void => {\n        const {\n            currentUserId,\n            sendMessage\n        } = this.props\n        const {\n            textareaValue\n        } = this.state\n\n        if (textareaValue.trim().length > 0) {\n            const nowDate = new Date()\n            sendMessage({\n                authorId: currentUserId || 0,\n                messageId: shortid.generate(),\n                message: textareaValue.replace(/(\\r\\n|\\n|\\r)/gm, '<br>'),\n                time: `${nowDate.getHours()}:${nowDate.getMinutes()}:${nowDate.getSeconds()}`\n            }, chatMessages, chatIndex)\n\n            this.handleResetTextareaValue();\n        }\n    }\n\n    handleResetTextareaValue = () => {\n        this.setState({\n            textareaValue: ''\n        })\n        this.textareaRef.current?.focus();\n    }\n\n    handleKeyDown = (\n        chatMessages: TDataChatMesseges,\n        chatIndex: number\n    ): (event: KeyboardEvent<HTMLTextAreaElement>) => void => (\n        event: KeyboardEvent<HTMLTextAreaElement>\n    ) => {\n        const {\n            key,\n            shiftKey\n        } = event\n\n        if (key === 'Enter' && !shiftKey) {\n            this.handleSendingMessage(chatMessages, chatIndex)()\n        }\n    }\n\n    getIndexChatMessage = (\n        selectedChatId: string,\n        chats: TDataChats = []\n    ) : number => chats.findIndex(\n        ({ chatId }: {\n            chatId: string\n        }) => chatId === selectedChatId\n    );\n    \n    getChatMessages = (\n        chatIndex: number,\n        chats: TDataChats = [],\n        messages: TDataChatsMesseges = []\n    ) : TDataChatMesseges => {\n        let selectedChat\n        if (chatIndex) {\n            selectedChat = chats[chatIndex]\n       }\n    \n        if (selectedChat) {\n            return messages[selectedChat.messagesId]\n        } else {\n             return []\n        }\n    };\n\n    renderPanel = (\n        chatMessages: TDataChatMesseges,\n        chatIndex: number\n    ) => (\n        <div className={'panel'}>\n            <img\n                src='/react-messenger/icons/clip.svg'\n                alt='clip'\n            />\n            <textarea\n                className={'panel__textarea'}\n                ref={this.textareaRef} \n                placeholder='Write a message...'\n                value={this.state.textareaValue}\n                onChange={this.handleChange}\n                onKeyDown={this.handleKeyDown(chatMessages, chatIndex)}\n            />\n            <img\n                className={'panel__send'}\n                src='/react-messenger/icons/send.svg'\n                alt='send button'\n                onClick={this.handleSendingMessage(chatMessages, chatIndex)}\n            />\n        </div>\n    )\n\n    public render() {\n        const {\n            authors = [],\n            chats = [],\n            messages = [],\n            selectedChatId\n        } = this.props\n        // TODO вынести в контейнер\n        const chatIndex: number = this.getIndexChatMessage(selectedChatId, chats)\n        const chatMessages: TDataChatMesseges = this.getChatMessages(chatIndex, chats, messages)\n\n        return (\n            <main className={'rightColumn'}>\n                <Switch>\n                    <Route path='/chat' render={(props) => (\n                        <Messages\n                            {...props}\n                            authors={authors}\n                            chatMessages={chatMessages}\n                        />\n                    )}/>\n                </Switch>\n                {this.renderPanel(chatMessages, chatIndex)}\n            </main>\n        )\n    }\n}","import shortid from 'shortid'\nimport { loremIpsum } from \"lorem-ipsum\";\n\nexport const CHATS = [\n    {\n        chatId: shortid.generate(),\n        chatName: 'Group chat',\n        messagesId: 0,\n        icon: 'react'\n    },\n    {\n        chatId: shortid.generate(),\n        chatName: 'Group chat',\n        messagesId: 1,\n        icon: 'react'\n    },\n    {\n        chatId: shortid.generate(),\n        chatName: 'Group chat',\n        messagesId: 2,\n        icon: 'react'\n    },\n    {\n        chatId: shortid.generate(),\n        chatName: 'Group chat',\n        messagesId: 3,\n        icon: 'react'\n    },\n    {\n        chatId: shortid.generate(),\n        chatName: 'Group chat',\n        messagesId: 4,\n        icon: 'react'\n    },\n    {\n        chatId: shortid.generate(),\n        chatName: 'Group chat',\n        messagesId: 5,\n        icon: 'react'\n    },\n    {\n        chatId: shortid.generate(),\n        chatName: 'Group chat',\n        messagesId: 6,\n        icon: 'react'\n    },\n    {\n        chatId: shortid.generate(),\n        chatName: 'Group chat',\n        messagesId: 7,\n        icon: 'react'\n    },\n    {\n        chatId: shortid.generate(),\n        chatName: 'Group chat',\n        messagesId: 8,\n        icon: 'react'\n    },\n    {\n        chatId: shortid.generate(),\n        chatName: 'Group chat',\n        messagesId: 9,\n        icon: 'react'\n    }\n]\n\nexport const MESSAGES = [\n    [\n        {\n            dateMessagesId: shortid.generate(),\n            date: 1584144000000, // '14/3/2020'\n            dateMessages: [\n                {\n                    authorId: 0,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:40:06'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                },\n                {\n                    authorId: 0,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                },\n                {\n                    authorId: 0,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                }\n            ],\n        },\n        {\n            dateMessagesId: shortid.generate(),\n            date: 1584230400000, //'15/3/2020'\n            dateMessages:     [\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:40:06'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:14:31'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:49:32'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '08:38:10'\n                }\n            ]\n        }\n    ],\n    [\n        {\n            dateMessagesId: shortid.generate(),\n            date: 1552435200000, // '13/3/2019'\n            dateMessages: [\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:40:06'\n                },\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                },\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                }\n            ]\n        },\n        {\n            dateMessagesId: shortid.generate(),\n            date: 1552780800000, // '17/3/2019'\n            dateMessages:  [\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '15:40:06'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '16:40:06'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '17:40:06'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '18:40:06'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '19:40:06'\n                }\n            ]\n        }\n    ],\n    [\n        {\n            dateMessagesId: shortid.generate(),\n            date: 1559865600000, // '7/6/2019'\n            dateMessages:     [\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '10:40:06'\n                },\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '11:40:06'\n                },\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '12:40:06'\n                },\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '13:40:06'\n                },\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '14:40:06'\n                }\n            ]\n        },\n        {\n            dateMessagesId: shortid.generate(),\n            date: 1579478400000, // '20/1/2020'\n            dateMessages: [\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:40:06'\n                },\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:14:31'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:49:32'\n                },\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '08:38:10'\n                }\n            ]\n        }\n    ],\n    [\n        {\n            dateMessagesId: shortid.generate(),\n            date: 1584403200000, // '17/3/2020'\n            dateMessages:     [\n                {\n                    authorId: 0,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:40:06'\n                },\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                },\n                {\n                    authorId: 0,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:14:31'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:49:32'\n                },\n                {\n                    authorId: 0,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '08:38:10'\n                }\n            ]\n        },\n        {\n            dateMessagesId: shortid.generate(),\n            date: 1584489600000, // '18/3/2020'\n            dateMessages: [\n                {\n                    authorId: 0,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:40:06'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                },\n                {\n                    authorId: 0,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:14:31'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:49:32'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '08:38:10'\n                }\n            ]\n        }\n    ],\n    [\n        {\n            dateMessagesId: shortid.generate(),\n            date: 1584403200000, // '17/3/2020'\n            dateMessages: [\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:40:06'\n                },\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                },\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                }\n            ]\n        },\n        {\n            dateMessagesId: shortid.generate(),\n            date: 1584576000000, // '19/3/2020'\n            dateMessages: [\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:40:06'\n                },\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:14:31'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:49:32'\n                },\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '08:38:10'\n                }\n            ]\n        }\n    ],\n    [\n        {\n            dateMessagesId: shortid.generate(),\n            date: 1559865600000, // '7/6/2019'\n            dateMessages:  [\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '15:40:06'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '16:40:06'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '17:40:06'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '18:40:06'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '19:40:06'\n                }\n            ]\n        },\n        {\n            dateMessagesId: shortid.generate(),\n            date: 1561075200000, // '21/6/2019'\n            dateMessages: [\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:40:06'\n                },\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:14:31'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:49:32'\n                },\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '08:38:10'\n                }\n            ]\n        }\n    ],\n    [\n        {\n            dateMessagesId: shortid.generate(),\n            date: 1557619200000, // '5/12/2019'\n            dateMessages:     [\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '22:40:06'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '22:45:06'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:40:06'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:45:06'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:50:06'\n                }\n            ]\n        },\n        {\n            dateMessagesId: shortid.generate(),\n            date: 1579219200000, // '17/1/2020'\n            dateMessages:     [\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:45:06'\n                },\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:46:06'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:47:06'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:48:06'\n                },\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:49:06'\n                }\n            ],\n        }\n    ],\n    [\n        {\n            dateMessagesId: shortid.generate(),\n            date: 1579478400000, // '20/1/2020'\n            dateMessages: [\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:40:06'\n                },\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:14:31'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:49:32'\n                },\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '08:38:10'\n                }\n            ]\n        },\n        {\n            dateMessagesId: shortid.generate(),\n            date: 1581206400000, // '9/2/2020'\n            dateMessages:     [\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:40:06'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:14:31'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:49:32'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '08:38:10'\n                }\n            ]\n        }\n    ],\n    [\n        {\n            dateMessagesId: shortid.generate(),\n            date: 1596412800000, // '8/3/2020'\n            dateMessages: [\n                {\n                    authorId: 0,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:40:06'\n                },\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                },\n                {\n                    authorId: 0,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:14:31'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:49:32'\n                },\n                {\n                    authorId: 0,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '08:38:10'\n                }\n            ]\n        },\n        {\n            dateMessagesId: shortid.generate(),\n            date: 1583884800000, // '11/3/2020'\n            dateMessages: [\n                {\n                    authorId: 0,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:40:06'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                },\n                {\n                    authorId: 0,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:14:31'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:49:32'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '08:38:10'\n                }\n            ]\n        }\n    ],\n    [\n        {\n            dateMessagesId: shortid.generate(),\n            date: 1584057600000, // '13/3/2020'\n            dateMessages:     [\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:40:06'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:41:06'\n                },\n                {\n                    authorId: 1,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:42:06'\n                },\n                {\n                    authorId: 0,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:43:06'\n                },\n                {\n                    authorId: 2,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:44:06'\n                }\n            ]\n        },\n        {\n            dateMessagesId: shortid.generate(),\n            date: 1584144000000, // '14/3/2020'\n            dateMessages:     [\n                {\n                    authorId: 0,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '23:40:06'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '04:47:07'\n                },\n                {\n                    authorId: 0,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:14:31'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '06:49:32'\n                },\n                {\n                    authorId: 3,\n                    messageId: shortid.generate(),\n                    message: loremIpsum({ count: 3 }),\n                    time: '08:38:10'\n                }\n            ]\n        }\n    ]\n]\n\nexport const AUTHORS = [\n    {\n        email: 'test1@test.com',\n        name: 'The Shrek 1',\n        avatar: 'shrek1',\n        password: '123456'\n    },\n    {\n        email: 'test2@test.com',\n        name: 'The Shrek 2',\n        avatar: 'shrek2',\n        password: '1234567'\n    },\n    {\n        email: 'test3@test.com',\n        name: 'Rick Dalton 1',\n        avatar: 'RickDalton1',\n        password: '12345678'\n    },\n    {\n        email: 'test4@test.com',\n        name: 'Rick Dalton 2',\n        avatar: 'RickDalton2',\n        password: '123456789'\n    }\n]","import React, { PureComponent } from 'react';\nimport shortid from 'shortid'\nimport {\n  Switch,\n  Route\n} from 'react-router-dom'\n\nimport { withChatId } from 'utils/hoc/withChatId'\nimport { EmptyChat } from 'components/EmptyChat/EmptyChat';\nimport { LeftColumn } from 'components/LeftColumn/LeftColumn';\nimport { RightColumn } from 'components/RightColumn/RightColumn';\n\nimport './Chat.css'\nimport {\n  CHATS,\n  MESSAGES\n} from './Chat.mock'\n\nexport type TAuthor = {\n  email: string,\n  name: string,\n  avatar: string,\n  password: string\n}\n\nexport type TDataAuthors = TAuthor[];\n\nexport type TDateMessage = {\n  authorId: number,\n  messageId: string,\n  message: string,\n  time: string\n};\n\ntype TChat = {\n  chatId: string,\n  chatName: string,\n  icon: string,\n  messagesId: number\n};\n\nexport type TDataChats = TChat[];\n\nexport type TMessage = {\n  dateMessagesId: string,\n  date: number,\n  dateMessages: TDateMessage[]\n};\n\nexport type TDataChatMesseges = TMessage[];\n\nexport type TDataChatsMesseges = TDataChatMesseges[];\n\ntype TProps = {\n  currentUserId?: number,\n  authors: TDataAuthors\n}\n\ntype TState = {\n  chats: TDataChats,\n  messages: TDataChatsMesseges,\n}\n\nconst WithChatIdRightColumn = withChatId(RightColumn)\n\nexport class Chat extends PureComponent<TProps, TState>   {\n  public state = {\n    chats: [],\n    messages: []\n  }\n\n   componentDidMount = () => {\n     this.setState(prevState => ({\n      chats: [...prevState.chats, ...CHATS],\n      messages: [...prevState.messages, ...MESSAGES]\n    }))\n  }\n\n  public hanleSendMessage = (\n    message: TDateMessage,\n    chatMessages: TDataChatMesseges,\n    chatIndex: number\n  ): void => {\n    let hasCurrentDate = false\n    const currentDate = new Date();\n    const date = this.getFormatDate(currentDate)\n    const newChatMessages: TMessage[] = chatMessages.map((item: TMessage) => {\n      const itemDate = new Date(item.date)\n      const itemDateFormat = this.getFormatDate(itemDate)\n      if (itemDateFormat === date) {\n        item.dateMessages.push(message)\n\n        hasCurrentDate = true\n      }\n\n      return item\n    })\n\n  if (!hasCurrentDate) {\n\n    newChatMessages.push({\n      dateMessagesId: shortid.generate(),\n      date: Date.parse(date),\n      dateMessages: [message]\n    })\n\n    return this.setState(prevState => ({\n      messages: [\n        ...prevState.messages,\n        prevState.messages[chatIndex] = [...newChatMessages]\n      ]}))\n  }\n\n  this.setState(prevState => ({\n    messages: [\n      ...prevState.messages,\n      [...newChatMessages]\n    ]}))\n  }\n\n  getFormatDate = (date: Date) => `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`\n\n  public render() {\n    const {\n      currentUserId,\n      authors\n    } = this.props\n    const {\n      chats,\n      messages\n    } = this.state\n\n    return (\n      <div className=\"chat\">\n        <LeftColumn\n          authors={authors}\n          chats={chats}\n          messages={messages}\n        />\n        <Switch>\n          <Route exact path='/chat' component={EmptyChat}/>\n          <Route\n            path='/chat'\n            render={\n              (props) => <WithChatIdRightColumn\n                {...props}\n                currentUserId={currentUserId}\n                authors={authors}\n                chats={chats}\n                messages={messages}\n                sendMessage={this.hanleSendMessage}\n              />\n            }/>\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n","import React, { useState } from 'react';\nimport {\n  Switch,\n  Route,\n  Redirect\n} from 'react-router-dom';\n\nimport { Authorization } from 'components/Authorization/Authorization';\nimport { Chat } from 'components/Chat/Chat';\nimport {\n  TDataAuthors\n} from 'components/Chat/Chat';\nimport {\n  AUTHORS\n} from 'components/Chat/Chat.mock'\n\nimport './App.css';\n\nexport const App = () => {\n  const [userLogin, setUserLogin] = useState('');\n  const [userName, setUserName] = useState('');\n  const [userPassword, setUserPassword] = useState('');\n  const [userPasswordConfirm, setUserPasswordConfirm] = useState('');\n  const [isAuthorization, setAuthorization] = useState(false);\n  const [authors, addNewAuthor] = useState<TDataAuthors>(AUTHORS);\n  const [currentUserId, setCurrentUser] = useState(0);\n\n  return (\n    <div className=\"app\">\n      {isAuthorization\n          ? (\n            <Switch>\n                <Route\n                  path='/chat'\n                  render={\n                    (props) => (\n                      <Chat\n                        {...props}\n                        currentUserId={currentUserId}\n                        authors={authors}\n                      />\n                    )\n                  }\n                />\n                <Route\n                  path='*'\n                  render={() => <Redirect to='/chat' />}\n                />\n            </Switch>\n          )\n          : (\n             <Switch>\n              <Route\n                path='/authorization'\n                render={\n                  (props) => (\n                    <Authorization\n                      {...props}\n                      authors={authors}\n                      userLogin={userLogin}\n                      userName={userName}\n                      userPassword={userPassword}\n                      userPasswordConfirm={userPasswordConfirm}\n                      setUserLogin={setUserLogin}\n                      setUserPasswordConfirm={setUserPasswordConfirm}\n                      addNewAuthor={addNewAuthor}\n                      setUserName={setUserName}\n                      setUserPassword={setUserPassword}\n                      setAuthorization={setAuthorization}\n                      setCurrentUser={setCurrentUser}\n                      isAuthorization={isAuthorization}\n                    />\n                  )\n                }/>\n              <Route\n                path='*'\n                render={() => <Redirect to='/authorization' />}\n              />\n            </Switch>\n          )\n      }\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { App } from 'components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(\n  <StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}